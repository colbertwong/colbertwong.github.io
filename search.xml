<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vba的几个小memo</title>
      <link href="/2020/04/22-1046.html"/>
      <url>/2020/04/22-1046.html</url>
      
        <content type="html"><![CDATA[<h2 id="vba的几个小memo"><a href="#vba的几个小memo" class="headerlink" title="vba的几个小memo"></a>vba的几个小memo</h2><p>帮同事写了一个vba小工具。需求是将某目录下的一些excel表格的内容（CRUD），按照某个维度（画面ID）进行合并，输出在一个新excle表格中。用到了几个vba的小知识点，memo一下。</p><ol><li>文件夹下所有文件取得</li><li>字典（用于记录合并key的map）</li><li>文本文件输出（记录日志）</li></ol><pre class="line-numbers language-vb"><code class="language-vb">' vba源代码Sub update_Click()    ' 定义变量    Dim myFso As Object    Dim myFiles    Dim sh As Variant    Dim strWorkPath As String    Dim strWorkBook As String    Dim shtWork As Worksheet    Dim strMyBook As String    Dim lngRow As Long    Dim lngNewRow As Long    Dim lngLoopRow As Long    Dim lngLoopCol As Long    Dim strSheet As String    Dim strCRUD As String    Dim i As Integer    Dim flgFound As Boolean    Dim dict As Object    Application.ScreenUpdating = False    If MsgBox("确定要更新一览的内容吗？", vbYesNo) = vbNo Then        Exit Sub    End If    lngNewRow = 2    strMyBook = ActiveWorkbook.Name    ' 删除表格中第四行所有内容    Rows(4 & ":" & Cells(4, 2).End(xlDown).Row).Delete shift:=xlUp    ' 清楚第三行内容，保留格式    Rows(3).ClearContents    ' 取得当前目录下文件一览    Set myFso = CreateObject("Scripting.FileSystemObject")    Set myFiles = myFso.GetFolder(ActiveWorkbook.Path).Files    ' 以输出模式打开日志文件log.txt    Open ActiveWorkbook.Path & "\log.txt" For Output As #1    ' 创建字典对象    Set dict = CreateObject("Scripting.Dictionary")    For Each sh In myFiles        If InStr(sh.Name, "CRUD(") <> 0 Then            strWorkPath = sh.Path            strWorkBook = sh.Name            Application.StatusBar =  strWorkBook & "文件处理中..."            ' 只读方式打开文件            Workbooks.Open Filename:=strWorkPath, ReadOnly:=True, UpdateLinks:=0            Set shtWork = Workbooks(strMyBook).Sheets(1)            With Workbooks(strWorkBook).Sheets("CRUD")                ' 显示所有隐藏列                .Columns.Hidden = False                lngLoopCol = 6                Do Until .Cells(4, lngLoopCol) = ""                    flgFound = False                    ' 判断字典中key是否存在                    If dict.exists(.Cells(5, lngLoopCol).Value) Then                        flgFound = True                        ' 取出字典中的值                        lngRow = dict.Item(.Cells(5, lngLoopCol).Value)                    End If                    If Not flgFound Then                        lngNewRow = lngNewRow + 1                        lngRow = lngNewRow                        If .Cells(5, lngLoopCol) = "" Then                            .Cells(5, lngLoopCol) = "UNKNOWN" & (lngRow - 2)                        End If                        ' 追加字典中的项目，key尽量用字符串，不要用对象                        dict.Add .Cells(5, lngLoopCol).Value, lngRow                        shtWork.Rows(lngRow).Insert CopyOrigin:=xlFormatFromRightOrBelow                        ' 序号                        shtWork.Cells(lngRow, 2) = lngRow - 2                        ' 画面ID                        shtWork.Cells(lngRow, 3) = .Cells(5, lngLoopCol)                        ' 画面名                        shtWork.Cells(lngRow, 4) = .Cells(4, lngLoopCol)                    End If                     ' CRUD合并，去重                    lngLoopRow = 7                    Do Until .Cells(lngLoopRow, 3) = ""                        ' 向日志文件中写入内容                        Print #1, strWorkBook & "->" & .Cells(5, lngLoopCol) & .Cells(lngLoopRow, 5) & "." & .Cells(lngLoopRow, 3) & " : " & .Cells(lngLoopRow, lngLoopCol)                        If .Cells(lngLoopRow, lngLoopCol) <> "" Then                            strCRUD = .Cells(lngLoopRow, lngLoopCol)                            For i = 1 To Len(strCRUD)                                If InStr(shtWork.Cells(lngRow, 5), Mid(strCRUD, i, 1)) = 0 Then                                    shtWork.Cells(lngRow, 5) = shtWork.Cells(lngRow, 5) & Mid(strCRUD, i, 1)                                End If                            Next                            ' 表名                            shtWork.Cells(lngRow, 6) = shtWork.Cells(lngRow, 6) & .Cells(lngLoopRow, 5) & "." & .Cells(lngLoopRow, 3) & "(" & .Cells(lngLoopRow, lngLoopCol) & ")" & Chr(10)                        End If                        lngLoopRow = lngLoopRow + 1                    Loop                    ' CRUD顺序整理                    If shtWork.Cells(lngRow, 5) <> "" Then                        strCRUD = ""                        If InStr(shtWork.Cells(lngRow, 5), "C") Then                            strCRUD = strCRUD & "C"                        End If                        If InStr(shtWork.Cells(lngRow, 5), "R") Then                            strCRUD = strCRUD & "R"                        End If                        If InStr(shtWork.Cells(lngRow, 5), "U") Then                            strCRUD = strCRUD & "U"                        End If                        If InStr(shtWork.Cells(lngRow, 5), "D") Then                            strCRUD = strCRUD & "D"                        End If                        shtWork.Cells(lngRow, 5) = strCRUD                    End If                    lngLoopCol = lngLoopCol + 1                Loop            End With            ' 关闭文件，不保存            Workbooks(strWorkBook).Close saveChanges:=False        End If    Next    ' 关闭日志文件    Close #1    Application.StatusBar = False    Set myFso = Nothing    Application.ScreenUpdating = TrueEnd Sub<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>补充：同时打开多个文件进行处理数据时，要明确指出文件对象，不要相信什么默认当前文件对象。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vba </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3 memo 0418PM</title>
      <link href="/2020/04/20-2011.html"/>
      <url>/2020/04/20-2011.html</url>
      
        <content type="html"><![CDATA[<h2 id="python3-memo-0418PM"><a href="#python3-memo-0418PM" class="headerlink" title="python3 memo 0418PM"></a>python3 memo 0418PM</h2><p>python3的随堂笔记，这是最后一部分。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 异常</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">2</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B'</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 捕获异常</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'C'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 没有异常</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'D'</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'E'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 有异常：ACE</span><span class="token comment" spellcheck="true"># 无异常：ABDE</span><span class="token comment" spellcheck="true"># 跟踪信息</span><span class="token keyword">import</span> traceback<span class="token keyword">try</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span> <span class="token number">0</span><span class="token keyword">except</span> ZeroDivisionError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># print(e)  # 异常信息</span>    traceback<span class="token punctuation">.</span>print_exc<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 打印跟踪信息</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'出现异常2'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 抛出异常</span><span class="token keyword">raise</span> EOFError<span class="token punctuation">(</span><span class="token string">'出现异常'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义一个函数，求n个数字的最大值</span><span class="token comment" spellcheck="true"># max(1, 2, 3)</span><span class="token comment" spellcheck="true"># max([1 , 2, 3])</span><span class="token comment" spellcheck="true"># max()  TypeError: max expected 1 arguments, got 0</span><span class="token keyword">def</span> <span class="token function">findMax</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a<span class="token punctuation">:</span>        <span class="token keyword">return</span> max<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> TypeError<span class="token punctuation">(</span><span class="token string">'max expected 1 arguments, got 0'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>findMax<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 文件操作</span><span class="token comment" spellcheck="true"># 路径表示方法</span><span class="token comment" spellcheck="true"># e:\\a.txt</span><span class="token comment" spellcheck="true"># r'e:\a.txt'</span><span class="token comment" spellcheck="true"># e:/a.txt</span><span class="token comment" spellcheck="true"># 操作模式 r</span><span class="token comment" spellcheck="true"># 基本读</span>f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">'e:/a.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 一次性读</span><span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 多次读</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    c <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> c<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 改进1：通过with打开的文件，会自动关闭</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'e:/a.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 改进2：按行读</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'e:/a.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 写文件</span>lineNumber <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">with</span> open<span class="token punctuation">(</span><span class="token string">'e:/a.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">,</span> open<span class="token punctuation">(</span><span class="token string">'e:/b.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fw<span class="token punctuation">:</span>    <span class="token keyword">for</span> line <span class="token keyword">in</span> f<span class="token punctuation">:</span>        fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span>str<span class="token punctuation">(</span>lineNumber<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> line<span class="token punctuation">)</span>        lineNumber <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># time</span><span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1587193114.2873852</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">'%Y-%m-%d %H:%M:%S'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2020-04-18 15:00:56</span><span class="token comment" spellcheck="true"># 爬取数据：urllib，scrapy</span><span class="token comment" spellcheck="true"># 解析数据：正则表达式，Beautiful Soup，scrapy</span><span class="token comment" spellcheck="true"># .*: 贪婪匹配，匹配更多的字符，在结尾</span><span class="token comment" spellcheck="true"># .*?: 非贪婪匹配，匹配最少的字符，在中间</span><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> reresp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'http://www.xxx.com.cn/cn/index.action?locale=zh_CN'</span><span class="token punctuation">)</span>html <span class="token operator">=</span> resp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>news <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'&lt;li class="newsList">.*?title="(.*?)".*?&lt;/li>'</span><span class="token punctuation">,</span> html<span class="token punctuation">,</span> re<span class="token punctuation">.</span>S<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>news<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据库操作</span><span class="token keyword">import</span> pymysqlconfig <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'host'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>    <span class="token string">'port'</span><span class="token punctuation">:</span> <span class="token number">3306</span><span class="token punctuation">,</span>    <span class="token string">'user'</span><span class="token punctuation">:</span> <span class="token string">'root'</span><span class="token punctuation">,</span>    <span class="token string">'password'</span><span class="token punctuation">:</span> <span class="token string">'123456'</span><span class="token punctuation">,</span>    <span class="token string">'database'</span><span class="token punctuation">:</span> <span class="token string">'world'</span><span class="token punctuation">}</span>con <span class="token operator">=</span> pymysql<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token operator">**</span>config<span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">'select * from country'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 所有操作必须通过游标完成</span>    <span class="token keyword">with</span> con<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> c<span class="token punctuation">:</span>        c<span class="token punctuation">.</span>execute<span class="token punctuation">(</span>sql<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 执行SQL</span>        result <span class="token operator">=</span> c<span class="token punctuation">.</span>fetchall<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 提取结果，((行),(行),(行))</span>        <span class="token keyword">for</span> row <span class="token keyword">in</span> result<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>row<span class="token punctuation">)</span>    con<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    con<span class="token punctuation">.</span>rollback<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    con<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="补充：解决pip无法安装问题"><a href="#补充：解决pip无法安装问题" class="headerlink" title="补充：解决pip无法安装问题"></a>补充：解决pip无法安装问题</h3><p>更换安装源，使用方法很简单，直接 -i 加 源url 即可！例如：<br><code>pip install pymysql -i http://pypi.douban.com/simple --trusted-host pypi.douban.com</code></p><p>其他源：</p><blockquote><p>阿里云 <a href="http://mirrors.aliyun.com/pypi/simple/" target="_blank" rel="noopener">http://mirrors.aliyun.com/pypi/simple/</a><br>中国科技大学 <a href="https://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.mirrors.ustc.edu.cn/simple/</a><br>豆瓣(douban) <a href="http://pypi.douban.com/simple/" target="_blank" rel="noopener">http://pypi.douban.com/simple/</a><br>清华大学 <a href="https://pypi.tuna.tsinghua.edu.cn/simple/" target="_blank" rel="noopener">https://pypi.tuna.tsinghua.edu.cn/simple/</a><br>中国科学技术大学 <a href="http://pypi.mirrors.ustc.edu.cn/simple/" target="_blank" rel="noopener">http://pypi.mirrors.ustc.edu.cn/simple/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3 memo 0418AM</title>
      <link href="/2020/04/20-2000.html"/>
      <url>/2020/04/20-2000.html</url>
      
        <content type="html"><![CDATA[<h2 id="python3-memo-0418AM"><a href="#python3-memo-0418AM" class="headerlink" title="python3 memo 0418AM"></a>python3 memo 0418AM</h2><p>python3的随堂笔记，这是第三部分。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 函数</span><span class="token comment" spellcheck="true"># 定义函数，求两个数字的最大公约数</span><span class="token keyword">def</span> <span class="token function">gongyue</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" 求最大公约数 """</span>    result <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> min<span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> a <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">and</span> b <span class="token operator">%</span> i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> i    <span class="token keyword">return</span> result<span class="token keyword">print</span><span class="token punctuation">(</span>gongyue<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 别名: 函数名指向函数的指针</span>f <span class="token operator">=</span> gongyue<span class="token keyword">print</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 参数类型</span><span class="token comment" spellcheck="true"># 不可变的类型(改变后创建一个新值): string, number, tuple</span><span class="token comment" spellcheck="true"># 可变的类型： list, dict</span><span class="token keyword">def</span> <span class="token function">method</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token string">'123'</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1858020758960</span>b <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1858020668336</span>method<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># abc</span><span class="token comment" spellcheck="true"># 默认参数: 必须出现在参数列表的右侧</span><span class="token keyword">def</span> <span class="token function">method</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>method<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>method<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 可变参数，a tuple类型</span><span class="token comment" spellcheck="true"># 最少的个数0，最多不限制</span><span class="token keyword">def</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>method<span class="token punctuation">(</span><span class="token punctuation">)</span>method<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>method<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'4'</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 关键字参数：给指定的参数赋值</span><span class="token keyword">def</span> <span class="token function">method</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>method<span class="token punctuation">(</span>b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">)</span>method<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># **形参：按关键字参数传值，形参得到字典</span><span class="token keyword">def</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token operator">**</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># {'x': 1, 'y': 2, 'z': 3}</span>method<span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 关键字参数</span><span class="token comment" spellcheck="true"># **实参：把字典转换成关键字参数</span><span class="token keyword">def</span> <span class="token function">method</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>kw <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">}</span>method<span class="token punctuation">(</span><span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 组合: 必写参数，[可变参数，默认参数]，关键字参数</span><span class="token keyword">def</span> <span class="token function">print</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">'\n'</span><span class="token punctuation">,</span> file<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">method</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">*</span>z<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">method</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token operator">*</span>z<span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 匿名函数，:前是形参，:后是返回表达式</span><span class="token comment" spellcheck="true"># 相当于</span><span class="token keyword">def</span> <span class="token function">method</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token operator">+</span> zmethod <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token punctuation">:</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token keyword">print</span><span class="token punctuation">(</span>method<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 作用域</span>a <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 全局作用域</span><span class="token keyword">def</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a  <span class="token comment" spellcheck="true"># 声明使用全局变量</span>    a <span class="token operator">=</span> <span class="token number">2</span>    b <span class="token operator">=</span> <span class="token number">3</span> <span class="token comment" spellcheck="true"># 闭包函数外的变量</span>    <span class="token keyword">def</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">global</span> a  <span class="token comment" spellcheck="true"># 声明使用全局变量</span>        nonlocal b  <span class="token comment" spellcheck="true"># 声明使用闭包函数外的变量</span><span class="token comment" spellcheck="true"># 导入模块</span><span class="token comment" spellcheck="true"># 1: 文件名.函数名</span><span class="token keyword">import</span> Hello2Hello2<span class="token punctuation">.</span>getSalary<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 2.函数名</span><span class="token keyword">from</span> Hello2 <span class="token keyword">import</span> <span class="token operator">*</span>getSalary<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 包: 相当于文件夹 + __init__.py</span><span class="token comment" spellcheck="true"># 在文件名前加包名，两种写法都支持</span><span class="token keyword">import</span> util<span class="token punctuation">.</span>Hello2util<span class="token punctuation">.</span>Hello2<span class="token punctuation">.</span>getSalary<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 类</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 类属性</span>    clazz <span class="token operator">=</span> <span class="token string">'1班'</span>    <span class="token comment" spellcheck="true">#构造函数</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> id<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 实例属性</span>        self<span class="token punctuation">.</span>id <span class="token operator">=</span> id        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token comment" spellcheck="true">#方法</span>    <span class="token keyword">def</span> <span class="token function">print_student</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>id<span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 创建对象，没有new关键字</span>stu1 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'张'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 访问实例属性，对象与对象之间独立</span><span class="token keyword">print</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>id<span class="token punctuation">,</span> stu1<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1 张</span><span class="token comment" spellcheck="true"># 调用函数</span>stu1<span class="token punctuation">.</span>print_student<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 1 张</span><span class="token comment" spellcheck="true"># 访问类属性，可以通过对象名.，类名.访问，全局唯一，与对象无关</span><span class="token keyword">print</span><span class="token punctuation">(</span>stu1<span class="token punctuation">.</span>clazz<span class="token punctuation">,</span> Student<span class="token punctuation">.</span>clazz<span class="token punctuation">)</span>Student<span class="token punctuation">.</span>clazz <span class="token operator">=</span> <span class="token string">'2班'</span>stu2 <span class="token operator">=</span> Student<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'Lee'</span><span class="token punctuation">)</span>stu2<span class="token punctuation">.</span>print_student<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2 Lee</span><span class="token keyword">print</span><span class="token punctuation">(</span>stu2<span class="token punctuation">.</span>clazz<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2班</span><span class="token keyword">class</span> <span class="token class-name">Emp</span><span class="token punctuation">:</span>    __name <span class="token operator">=</span> <span class="token string">'Lee'</span>  <span class="token comment" spellcheck="true"># 私有类属性</span>    _dept <span class="token operator">=</span> <span class="token string">'HR'</span>  <span class="token comment" spellcheck="true"># 保护型类属性，编码上的约定</span><span class="token keyword">print</span><span class="token punctuation">(</span>Emp<span class="token punctuation">.</span>__name<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Emp</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 普通方法: 通过对象调用</span>    <span class="token keyword">def</span> <span class="token function">method1</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># 类方法: 通过类名调用</span>    @classmethod    <span class="token keyword">def</span> <span class="token function">method2</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># cls类名</span>        <span class="token keyword">pass</span>    <span class="token comment" spellcheck="true"># 静态方法: 通过类名调用</span>    @staticmethod    <span class="token keyword">def</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token comment" spellcheck="true"># 继承</span><span class="token keyword">class</span> <span class="token class-name">Parent</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span>        self<span class="token punctuation">.</span>x <span class="token operator">=</span> x    <span class="token keyword">def</span> <span class="token function">method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span><span class="token keyword">class</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span>Parent<span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">2</span>  <span class="token comment" spellcheck="true"># 属性隐藏</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 调用父类的构造函数</span>    <span class="token keyword">def</span> <span class="token function">method</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true"># 方法重写</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'sub'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 子类可以继承类属性、实例属性、方法</span><span class="token comment" spellcheck="true"># 没有方法重载</span><span class="token comment" spellcheck="true"># 调用父类的构造函数  super().__init__(x)</span>obj <span class="token operator">=</span> Sub<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>a<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>b<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span>obj<span class="token punctuation">.</span>method<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3 memo 0411PM</title>
      <link href="/2020/04/12-1335.html"/>
      <url>/2020/04/12-1335.html</url>
      
        <content type="html"><![CDATA[<h2 id="python3-memo-0411PM"><a href="#python3-memo-0411PM" class="headerlink" title="python3 memo 0411PM"></a>python3 memo 0411PM</h2><p>python3的随堂笔记，这是第二部分。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 猜数字</span><span class="token keyword">import</span> randomn <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(n)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入:'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> m <span class="token operator">==</span> n<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'相等'</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>    <span class="token keyword">elif</span> m <span class="token operator">></span> n<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'大了'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'小了'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># python中没有switch/case</span><span class="token comment" spellcheck="true"># 输入月份，求当前月份中的天数</span><span class="token comment" spellcheck="true"># switch(month) {</span><span class="token comment" spellcheck="true">#     case 1:</span><span class="token comment" spellcheck="true">#     case 3:</span><span class="token comment" spellcheck="true">#     case 5:</span><span class="token comment" spellcheck="true">#     // ..</span><span class="token comment" spellcheck="true">#     case 12: System.out.println(31); break;</span><span class="token comment" spellcheck="true">#     // ..</span><span class="token comment" spellcheck="true"># }</span>month <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入月份: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> month <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token keyword">elif</span> month <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># while: 求100~200之间的素数</span><span class="token comment" spellcheck="true"># 注意：缩进</span>i <span class="token operator">=</span> <span class="token number">100</span><span class="token keyword">while</span> i <span class="token operator">&lt;=</span> <span class="token number">200</span><span class="token punctuation">:</span>    j <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">while</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        j <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 循环条件不成立时执行else，如果break，else不执行</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># for: 相当于Java中的for/each</span><span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'else'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># range(5): 0, 1, 2, 3, 4</span><span class="token comment" spellcheck="true"># range(5, 10): 5, 6, 7, 8, 9</span><span class="token comment" spellcheck="true"># range(5, 10, 2): 5, 7, 9</span><span class="token comment" spellcheck="true"># range(10, 1, -1): 10, ... , 2</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 求和：1 + 2 + ... + 100</span>sum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum <span class="token operator">+=</span> i<span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 求水仙花数，要求：3位数，153 = 1^3 + 5 ^3 + 3^3</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> str<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> int<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> int<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> int<span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 数据结构</span><span class="token comment" spellcheck="true"># 序列：列表，元祖，字符串</span><span class="token comment" spellcheck="true"># 映射：字典</span><span class="token comment" spellcheck="true"># 集合：集合</span><span class="token comment" spellcheck="true"># 序列通用操作</span><span class="token comment" spellcheck="true"># 索引</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 33</span><span class="token comment" spellcheck="true"># 切片：【左闭右开】</span><span class="token comment" spellcheck="true"># 第一个参数：代表开始位置,省略到序列的开头</span><span class="token comment" spellcheck="true"># 第二个参数：代表结束位置（不包括）,省略到序列的末尾</span><span class="token comment" spellcheck="true"># 第三个参数：步长，默认是1</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'aa'</span><span class="token punctuation">,</span> <span class="token string">'bb'</span><span class="token punctuation">,</span> <span class="token string">'cc'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 相加：连接</span><span class="token comment" spellcheck="true"># 乘法：重复出现</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2]</span><span class="token comment" spellcheck="true"># None：相当于Java中null</span>a <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">7</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># [None, None, None, None, None, None, None]</span><span class="token comment" spellcheck="true"># 常用函数</span><span class="token comment" spellcheck="true"># len() max() min() sum()</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> max<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> min<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 4 33 1</span><span class="token comment" spellcheck="true"># 求3个数字的最大值</span>a <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'a: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>b <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'b: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'c: '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m <span class="token operator">=</span> max<span class="token punctuation">(</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 变量交换</span>a <span class="token operator">=</span> <span class="token number">1</span>b <span class="token operator">=</span> <span class="token number">2</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token comment" spellcheck="true"># 列表：模拟打分</span><span class="token comment" spellcheck="true"># 5个评委，去掉一个最高分，去掉一个最低分，剩下求平均值</span>list <span class="token operator">=</span> <span class="token punctuation">[</span>None<span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">5</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> int<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token string">'请输入：'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方法1</span>avg <span class="token operator">=</span> <span class="token punctuation">(</span>sum<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">-</span> max<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">-</span> min<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>avg<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 方法2</span>list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>list2 <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>sum<span class="token punctuation">(</span>list2<span class="token punctuation">)</span> <span class="token operator">/</span> len<span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># tuple</span><span class="token comment" spellcheck="true"># 只读的列表</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'tuple'></span><span class="token comment" spellcheck="true"># 注意事项</span><span class="token comment" spellcheck="true"># 默认情况下，()代表数学上括号</span><span class="token comment" spellcheck="true"># 如果想创建只有一个元素的tuple，需要在元素后加逗号</span>a <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># &lt;class 'tuple'></span><span class="token comment" spellcheck="true"># 字符串，一些常用函数</span><span class="token comment" spellcheck="true"># ''.format()</span><span class="token comment" spellcheck="true"># ''.endswith()</span><span class="token comment" spellcheck="true"># ''.startswith()</span><span class="token comment" spellcheck="true"># ''.find()</span><span class="token comment" spellcheck="true"># ''.isalpha()</span><span class="token comment" spellcheck="true"># ''.isdigit()</span><span class="token comment" spellcheck="true"># ''.islower()</span><span class="token comment" spellcheck="true"># ''.isupper()</span><span class="token comment" spellcheck="true"># ''.lower()</span><span class="token comment" spellcheck="true"># ''.upper()</span><span class="token comment" spellcheck="true"># ''.strip()</span><span class="token comment" spellcheck="true"># ''.lstrip()</span><span class="token comment" spellcheck="true"># ''.rstrip()</span><span class="token comment" spellcheck="true"># ''.replace()</span><span class="token comment" spellcheck="true"># ''.split()</span><span class="token comment" spellcheck="true"># Set: 集合，消除重复的元素，集合运算</span><span class="token comment" spellcheck="true"># 字典：相当于Map</span><span class="token comment" spellcheck="true"># []: 列表，(): 元祖，{}: 字典</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token string">'11'</span><span class="token punctuation">,</span> <span class="token string">'key'</span><span class="token punctuation">:</span> <span class="token string">'22'</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">[</span><span class="token string">'key'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 后面的值，会替换前一个值，22</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">[</span><span class="token string">'key2'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># key2不存在，KeyError: 'key2'</span><span class="token comment" spellcheck="true"># 通过get取值</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'key2'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># None</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'key2'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 当key不存在，返回第二个参数</span><span class="token comment" spellcheck="true"># 求英文中，每个字母出现的次数</span><span class="token comment" spellcheck="true"># 字典：key：字母；value：出现次数</span>str <span class="token operator">=</span> <span class="token string">'Process finished with exit code 0'</span>dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">for</span> c <span class="token keyword">in</span> str<span class="token punctuation">:</span>    <span class="token keyword">if</span> c<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dict<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">=</span> dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token comment" spellcheck="true"># 遍历</span><span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 定义: dict = {key:value}</span><span class="token comment" spellcheck="true"># 存值: dict[key] = value</span><span class="token comment" spellcheck="true"># 取值：dict.get(key)</span><span class="token comment" spellcheck="true"># 遍历：for</span><span class="token comment" spellcheck="true"># 函数</span><span class="token comment" spellcheck="true"># 不写返回类型</span><span class="token comment" spellcheck="true"># </span><span class="token triple-quoted-string string">""" doc string """</span><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">""" doc string """</span>    <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token keyword">print</span><span class="token punctuation">(</span>func<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python3 memo 0411AM</title>
      <link href="/2020/04/12-1026.html"/>
      <url>/2020/04/12-1026.html</url>
      
        <content type="html"><![CDATA[<h2 id="python3-memo-0411AM"><a href="#python3-memo-0411AM" class="headerlink" title="python3 memo 0411AM"></a>python3 memo 0411AM</h2><p>python3的随堂笔记，这是第一部分。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> keyword<span class="token comment" spellcheck="true"># 几个特别的关键字：False, True, elif</span><span class="token keyword">print</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span>kwlist<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 强类型: 不能自动完成类型转换</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">'2'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># error</span><span class="token comment" spellcheck="true"># 动态语言：可以接受任意类型</span>a <span class="token operator">=</span> <span class="token number">1</span>a <span class="token operator">=</span> <span class="token string">'abc'</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># abc</span><span class="token comment" spellcheck="true"># 默认所有接收输入，字符串类型</span><span class="token comment" spellcheck="true"># int(): 类型转换函数</span>a <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'请输入一个数字:'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>int<span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 正确计算</span><span class="token comment" spellcheck="true"># 显示类型和内存地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>type<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># &lt;class 'str'></span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 2081020976816</span>b <span class="token operator">=</span> <span class="token number">2000</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 140729862683744</span>c <span class="token operator">=</span> <span class="token number">2000</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># 140729862683744</span><span class="token comment" spellcheck="true"># 数值类型</span><span class="token comment" spellcheck="true"># / 除法：能除到小数</span><span class="token comment" spellcheck="true"># // 地板除</span><span class="token comment" spellcheck="true"># ** 乘方</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 3</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">//</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># -4, 地板除(向下取整)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># -2, 10 - (-3) * (-4)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">10</span> <span class="token operator">%</span> <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># -1, -10 - (-3) * 3</span><span class="token comment" spellcheck="true"># bool True对应1，False对应0 ,布尔型是数值类型</span>a <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 2</span><span class="token comment" spellcheck="true"># 强制转换</span><span class="token comment" spellcheck="true"># int(), float(), bool(), str()</span><span class="token comment" spellcheck="true"># 自动转换（数值内部，包括bool类型）</span><span class="token comment" spellcheck="true"># 字符串类型：</span><span class="token comment" spellcheck="true"># 多行字符串表示，三个引号</span><span class="token comment" spellcheck="true"># r,R 不转义</span><span class="token comment" spellcheck="true"># 取子字符串，【左闭右开】，切片操作 </span><span class="token comment" spellcheck="true"># 第一个参数：代表开始位置,省略到字符串的开头</span><span class="token comment" spellcheck="true"># 第二个参数：代表结束位置（不包括）,省略到字符串的末尾</span><span class="token comment" spellcheck="true"># 第三个参数：步长，默认是1</span>a <span class="token operator">=</span> <span class="token string">'1234567'</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1234567, id() ?</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1357</span><span class="token comment" spellcheck="true"># *：重复字符串</span><span class="token comment" spellcheck="true"># +: 连接字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">*</span> <span class="token number">10</span> <span class="token operator">+</span> <span class="token string">'Hello'</span> <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">*</span> <span class="token number">13</span> <span class="token operator">+</span> <span class="token string">'*'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'*'</span> <span class="token operator">*</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'abd'</span> <span class="token keyword">in</span> <span class="token string">'abcdefg'</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># False, 相当于contains(), indexOf()</span><span class="token comment" spellcheck="true"># 格式化 %</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, %s'</span> <span class="token operator">%</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, %s%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, %.2f%.2f'</span> <span class="token operator">%</span> <span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'333'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 1|abc|333</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'abc'</span><span class="token punctuation">,</span> <span class="token string">'333'</span><span class="token punctuation">,</span> sep<span class="token operator">=</span><span class="token string">'|'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 格式化 format()</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, {}-{}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, {1}-{0}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># Hello, 200-100</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, {a}-{b}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Hello, {a:.2f}-{b}'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>a<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">,</span> b<span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># Python中没有++，--</span><span class="token comment" spellcheck="true"># ==：判断值是否相等；is：判断地址是否相等</span>a <span class="token operator">=</span> <span class="token string">'123'</span>b <span class="token operator">=</span> <span class="token string">'123'</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token keyword">is</span> b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>本地bootstrap4中文手册</title>
      <link href="/2020/04/08-1051.html"/>
      <url>/2020/04/08-1051.html</url>
      
        <content type="html"><![CDATA[<h2 id="本地bootstrap4中文手册"><a href="#本地bootstrap4中文手册" class="headerlink" title="本地bootstrap4中文手册"></a>本地bootstrap4中文手册</h2><p>今天有同事来问我，能不能帮忙找个 <code>bootstrap4</code> 的离线手册。因为之前下载过 <code>bootstrap3</code> 的离线手册并收藏了<a href="https://www.bootcss.com/" target="_blank" rel="noopener">网址</a>，就满口答应了下来。结果尴尬了，该网站并不提供 <code>bootstrap4</code> 的离线手册，只有在线的。于是继续搜索，更尴尬的事情发生了，没找到。。。由于信息安全的要求，整个部门都是离线开发的，所以离线手册对我们来讲挺重要的。小学生守则教导我们，答应别人的事情要努力做到(其实是不能跌份儿啊)。于是曲线救国，在 <code>github</code> 上找到了 <code>bootstrap4</code> 的<a href="https://github.com/tmplink/bootstrap4_chinese" target="_blank" rel="noopener">中文手册翻译项目</a>， 读了一下readme，是支持在本地用一个web服务器让它跑起来的。</p><p>下载工程，传到内网web服务器，解压，子目录方式访问<code>http://localhost/bootstrap4cn/index.html</code>，嗯？一片空白？赶快开发者模式看一下，访问 <code>index.html</code> 时， <code>http://localhost/config/pre.html?v=1586316257938</code> 找不到。url中缺少了子目录，调查了一下，该项目试用了一个叫 <code>domloader.js</code> 的前端加载小工具，如果需要使用子目录方式访问的话，需要设置一个 <code>domloader.root</code> 的参数<a href="https://www.anspoon.com/domloader-3444.html" target="_blank" rel="noopener">参考文章《HTML模板加载对象，简化并优化前端开发的小工具domloader》</a>。 <code>config/init.html</code> 和 <code>js/domloader.js</code> 里都有 <code>domloader.root</code> ,值全部修改为 <code>http://localhost/bootstrap4cn/</code> （其实只修改init.html里的即可）， 再次访问<code>http://localhost/bootstrap4cn/</code>，成功访问首页。高兴的点击一下【让我们开始吧】按钮，嗯？又来？一片空白？继续调查，访问 <code>http://localhost/bootstrap4cn/pages/getting_started.html</code> 页面时， <code>http://localhost/config/pre.html?v=1586325297234</code> 找不到。已经改过 <code>domloader.root</code> 了啊，怎么还有这种问题呢。打开 <code>pages/getting_started.html</code> 文件，发现代码 <code>domloader.preload(&#39;../config/pre.html&#39;);</code> 。和 <code>init.html</code> 里的root值一结合，嗯，完美干掉了的子目录 <code>bootstrap4cn</code> 。直接修改 <code>domloader.preload(&#39;../config/pre.html&#39;);</code> 为 <code>domloader.preload(&#39;config/pre.html&#39;);</code> 。刷新浏览器，开始页面也出来了。一顿展开， <code>pages</code> 目录下的文件都做相同的修改。随意进入了几个页面，好像没有其他问题了。</p><p>如果不使用子目录方式访问的话，是不需要做任何修改的。</p><p>以上</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> bootstrap4 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>日常试用hexo写作流程</title>
      <link href="/2020/04/08-0952.html"/>
      <url>/2020/04/08-0952.html</url>
      
        <content type="html"><![CDATA[<h2 id="日常试用hexo写作流程"><a href="#日常试用hexo写作流程" class="headerlink" title="日常试用hexo写作流程"></a>日常试用hexo写作流程</h2><p>最近有些忙，一个月没写博客了。今天突然想写一下，结果忘了<code>hexo</code>怎么用了。我的天啊！太可怕了！这才几天啊，我这是个假脑子吗？其实已经四十多了，记不住也正常吧。好记性不如烂笔头，赶快写下来吧。</p><ol><li>打开命令行窗口，进入hexo作业目录。</li><li><code>git pull origin hexo</code> # 因为使用了多端管理，所以每次写文章前要拉取一下最新版</li><li><code>hexo new post &quot;新文章名称“</code> # 创建新文章，然后就可以愉快的写作了</li><li><code>git add .</code> # 完成文章后，追加到工作区</li><li><code>git commit -m &quot;巴拉巴拉&quot;</code> # 提交到本地库</li><li><code>git push origin hexo</code> # 提交到远程库</li><li><code>hexo g</code> # 生成文章</li><li><code>hexo d</code> # 发布文章</li></ol><p>好了，可以开始欣赏自己的文章了。</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo下的_post目录下的文件管理</title>
      <link href="/2020/02/12-1415.html"/>
      <url>/2020/02/12-1415.html</url>
      
        <content type="html"><![CDATA[<h3 id="hexo下的-post目录下的文件管理"><a href="#hexo下的-post目录下的文件管理" class="headerlink" title="hexo下的_post目录下的文件管理"></a>hexo下的_post目录下的文件管理</h3><p>使用<code>hexo new &lt;title&gt;</code>创建新的文章时，文件会被放到<code>source/_post</code>目录下，久而久之，文件越积越多，管理起来就会变得很麻烦。可以使用<code>_config.yml</code>的<code>new_post_name</code>项目来配置创建文件时的目录和文件名。默认值是<code>:title.md</code>。我想把每个月的文章放在一个目录下，所以设置值为：<code>:year/:month/:title.md</code>。效果如下：</p><pre class="line-numbers language-yml"><code class="language-yml"># Writingnew_post_name: :year/:month/:title.md # File name of new postsdefault_layout: post<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">hexo new <span class="token string">"hexo下的_post目录下的文件管理"</span>INFO  Created: D:\work\hexo\source\_posts\2020\02\hexo下的-post目录下的文件管理.md<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>另外，因为我没有安装文章汉字名转拼音的插件，为了避免文章的永久链接里出现汉字，所以也修改了<code>_config.yml</code>的<code>permalink</code>项目的值。</p><pre class="line-numbers language-yml"><code class="language-yml">permalink: :year/:month/:day-:hour:minute.html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash"><code class="language-bash">hexo gINFO  Start processing<span class="token punctuation">..</span>. <span class="token punctuation">..</span>.INFO  Generated: 2020/02/12-1515.html<span class="token punctuation">..</span>. <span class="token punctuation">..</span>.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo博客+github在多端同步</title>
      <link href="/2020/02/11-1938.html"/>
      <url>/2020/02/11-1938.html</url>
      
        <content type="html"><![CDATA[<h3 id="hexo博客-github在多端同步"><a href="#hexo博客-github在多端同步" class="headerlink" title="hexo博客+github在多端同步"></a>hexo博客+github在多端同步</h3><p>在家里的电脑搭好了hexo博客环境之后呢，就想着在公司电脑也可以写呀。于是在github建了个叫<code>myblog</code>的新仓库，把博客根目录里的东西一股脑推了上去。嗯？？？一堆乱七八糟的东西被推到了<code>username.github.io</code>里去了。不明白啊，先留作业吧，耽误之急是先恢复hexo博客环境，还好有备份（感谢对日开发的职业病）。百度了一圈，赶快memo一下。</p><ul><li><p>思路<br>仓库分两个分支：hexo和master。hexo作为默认分支，存放博客源代码，master分支存放博客生成页面。<br>（hexo分支为日常作业分支；master分支由<code>hexo d</code>来更新）</p></li><li><p>在github上的<code>username.github.io</code>仓库里创建hexo分支，并设置为默认分支。</p></li><li><p>确保本地的博客根目录里有<code>.gitignore</code>文件(应该是自动生成的文件)，内容如下：</p></li></ul><pre><code>.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/</code></pre><ul><li>进入本地博客根目录，初始化仓库，切换分支，提交文件：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">git</span> init<span class="token function">git</span> add -A<span class="token function">git</span> commit -m <span class="token string">"blog source files"</span><span class="token function">git</span> branch hexo<span class="token function">git</span> checkout hexo<span class="token function">git</span> remote add origin git@github.com:colbertwong/colbertwong.github.io.git<span class="token function">git</span> push origin hexo // 若发生‘ <span class="token operator">!</span> <span class="token punctuation">[</span>rejected<span class="token punctuation">]</span>        hexo -<span class="token operator">></span> hexo <span class="token punctuation">(</span>fetch first<span class="token punctuation">)</span>’错误，那就强制更新<span class="token function">git</span> push --force origin hexo // 若上一句没有错误，这句可以不用实行<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>他终端上的操作<ol><li>正常安装node和git</li><li>克隆hexo: <code>git clone git@github.com:colbertwong/colbertwong.github.io.git hexo</code></li><li>进入 hexo目录，执行 <code>npm install</code></li><li>全局安装hexo命令行：<code>npm install -g hexo-cli</code></li></ol></li></ul><p>以上</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ORA-01078和ORA-00109的解决方法</title>
      <link href="/2020/02/10-2053.html"/>
      <url>/2020/02/10-2053.html</url>
      
        <content type="html"><![CDATA[<h3 id="ORA-01078和ORA-00109的解决方法"><a href="#ORA-01078和ORA-00109的解决方法" class="headerlink" title="ORA-01078和ORA-00109的解决方法"></a>ORA-01078和ORA-00109的解决方法</h3><p>本文转载自博主【独家记忆0408】的原创文章。</p><blockquote><p>原文的版权声明：本文为博主原创文章，遵循 CC 4.0 BY-SA 版权协议，转载请附上原文出处链接和本声明。</p><p>原文链接：<a href="https://blog.csdn.net/u013519551/article/details/53489403" target="_blank" rel="noopener">https://blog.csdn.net/u013519551/article/details/53489403</a></p></blockquote><p>使用数据库经常会遇到各种异常报错信息，令人很是头疼，一起来看下ORA-01078和ORA-00109的解决方法：</p><p>创建实例后，进入sqlplus启动报错：</p><pre class="line-numbers language-bash"><code class="language-bash">sqlplus / as sysdba<span class="token punctuation">;</span>SQL*Plus: Release 11.1.0.6.0 - Production on Wed Aug 5 16:48:56 2009Copyright （c） 1982, 2007, Oracle. All rights reserved.Connected to an idle instance.SQL<span class="token operator">></span> startup<span class="token punctuation">;</span>ORA-01078: failure <span class="token keyword">in</span> processing system parametersLRM-00109: could not <span class="token function">open</span> parameter <span class="token function">file</span> <span class="token string">'/oracle/product/11.1.0/dbs/initorcl.ora'</span>SQL<span class="token operator">></span> <span class="token keyword">exit</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这是因为在oracle9i和oracle10g中，数据库默认将使用spfile启动数据库，如果spfile不存在，则就会出现上述错误。</p><p>解决方法：</p><p>将$ORACLE_BASE/admin/数据库名称/pfile目录下的init.ora.012009233838形式的文件copy 到$ORACLE_HOME/dbs目录下initoracle.ora即可。（注：initoracle.ora中的oracle为你的实例名 ORACLE_SID）</p><p>比如我的就为：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">cp</span> /oracle/admin/xok/pfile/init.ora.75200916276 /oracle/product/11.1.0/dbs/initorcl.orasqlplus / as sysdba<span class="token punctuation">;</span>SQL<span class="token operator">></span> startupORACLE instance started.Total System Global Area 855982080 bytesFixed Size 2143000 bytesVariable Size 486542568 bytesDatabase Buffers 360710144 bytesRedo Buffers 6586368 bytes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> oracle </tag>
            
            <tag> ORA-xxxxx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github又上不去了</title>
      <link href="/2020/02/08-0908.html"/>
      <url>/2020/02/08-0908.html</url>
      
        <content type="html"><![CDATA[<h3 id="github又上不去了"><a href="#github又上不去了" class="headerlink" title="github又上不去了"></a>github又上不去了</h3><p>昨天写的Hexo博文，推不到github上了。以为是github又间歇性抽风了，结果今天还是上不去。使用站长<a href="http://tool.chinaz.com/dns/" target="_blank" rel="noopener">DNS查询工具</a>检测了一下<code>github.com</code>，几个结果。其中【新加坡 Amazon数据中心】的ip地址ping了一下，毫无意外的timeout了。而【美国 弗吉尼亚州阿什本GitHub】的ip是可以ping通的。<br>这就好办了，打开本地<code>hosts</code>文件，加入映射信息。当然也不能忘了【github.global.ssl.fastly.net】(解决国内访问速度慢的问题)的映射信息。使用<a href="https://www.ipaddress.com" target="_blank" rel="noopener">https://www.ipaddress.com</a>来查询IP地址，应该更准确一些吧。</p><ul><li>hosts文件例</li></ul><pre class="line-numbers language-ini"><code class="language-ini">#github hosts192.30.253.113 github.com199.232.5.194 github.global.ssl.fastly.net<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>刷新dns</li></ul><pre class="line-numbers language-bash"><code class="language-bash">ipconfig /flushdns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果没生效重启电脑</p><p>以上</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用hexo和github搭建博客的memo</title>
      <link href="/2020/02/07-1217.html"/>
      <url>/2020/02/07-1217.html</url>
      
        <content type="html"><![CDATA[<h2 id="使用hexo和github搭建博客的memo"><a href="#使用hexo和github搭建博客的memo" class="headerlink" title="使用hexo和github搭建博客的memo"></a>使用hexo和github搭建博客的memo</h2><h3 id="感谢"><a href="#感谢" class="headerlink" title="感谢"></a>感谢</h3><p>搭建本博客时，基本是照搬这篇文章<a href="https://m.aliyun.com/yunqi/articles/742964?spm=5176.11156470.0.0.11c916075ld9TP" target="_blank" rel="noopener">hexo+github搭建博客(超级详细版，精细入微)</a>来的，感谢作者<a href="https://yafine-blog.cn" target="_blank" rel="noopener">YangAir</a>。</p><h3 id="MEMO"><a href="#MEMO" class="headerlink" title="MEMO"></a>MEMO</h3><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p>Node.js和git是常用软件，基本电脑上都安装过了。</p><ul><li>Node.js不要使用旧版本。否则在执行<code>hexo s</code>时，会发生异常。</li><li>npm包全局命令目录也要加入<code>path</code>环境变量。可参考<a href="https://blog.csdn.net/jianleking/article/details/79130667" target="_blank" rel="noopener">jyjin的node环境变量配置，npm环境变量配置</a></li><li>npm镜像源改为淘宝的<pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 查看npm的配置</span><span class="token function">npm</span> config list<span class="token comment" spellcheck="true"># 默认源</span><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npmjs.org<span class="token comment" spellcheck="true"># 临时改变镜像源</span><span class="token function">npm</span> --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span class="token comment" spellcheck="true"># 永久设置为淘宝镜像源</span><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span class="token comment" spellcheck="true"># 另一种方式，编辑 ~/.npmrc 加入下面内容</span>registry <span class="token operator">=</span> https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="Github-Pages创建"><a href="#Github-Pages创建" class="headerlink" title="Github Pages创建"></a>Github Pages创建</h4><p>先注册GitHub，再创建Github Pages</p><ul><li>Github Pages的仓库：username.github.io 我的 username 是 colbertwong，所以我的仓库名就是 colbertwong.github.io</li></ul><h4 id="安装hexo静态博客框架"><a href="#安装hexo静态博客框架" class="headerlink" title="安装hexo静态博客框架"></a>安装hexo静态博客框架</h4><p><a href="https://hexo.io/zh-cn/" target="_blank" rel="noopener">Hexo中文官网</a></p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># hexo框架的安装</span><span class="token function">npm</span> <span class="token function">install</span> -g hexo-cli<span class="token comment" spellcheck="true"># 等上一个命令完成后，在输入下面的命令</span>hexo init <span class="token operator">&lt;</span>新建文件夹的名称<span class="token operator">></span>  <span class="token comment" spellcheck="true">#初始化文件夹</span><span class="token function">cd</span> <span class="token operator">&lt;</span>新建文件夹的名称<span class="token operator">></span><span class="token function">npm</span> <span class="token function">install</span>  <span class="token comment" spellcheck="true"># 安装博客所需要的依赖文件</span><span class="token comment" spellcheck="true"># 运行监测</span>hexo ghexo s<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>浏览器中打开<a href="http://localhost:4000/，可以看到Hexo博客网页" target="_blank" rel="noopener">http://localhost:4000/，可以看到Hexo博客网页</a></p><h4 id="本地博客和Github-Pages的关联"><a href="#本地博客和Github-Pages的关联" class="headerlink" title="本地博客和Github Pages的关联"></a>本地博客和Github Pages的关联</h4><ul><li>安装发布用插件</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>将本地目录与GitHub关联起来</li></ul><pre class="line-numbers language-bash"><code class="language-bash">ssh-keygen -t rsa -C <span class="token string">"你的邮箱地址"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成的公钥（id_rsa.pub）与Github（点击右上角的头像 Settings 选择SSH and GPG keys）关联。</p><ul><li>测试一下是否与GitHub连接成功</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="本地博客设置"><a href="#本地博客设置" class="headerlink" title="本地博客设置"></a>本地博客设置</h4><ul><li>基本设置（/_config.yml）</li></ul><pre class="line-numbers language-yml"><code class="language-yml"># Sitetitle: 半岛愚人subtitle: 半岛有愚人，不惑仍不知。description: ''keywords:author: ColbertWonglanguage: zh-CNtimezone: ''# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://colbertwong.github.ioroot: /permalink: :year/:month/:day-:hour:minute.htmlpermalink_defaults:pretty_urls:  trailing_index: true # Set to false to remove trailing 'index.html' from permalinks  trailing_html: true # Set to false to remove trailing '.html' from permalinks<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>deploy设置（/_config.yml）</li></ul><pre class="line-numbers language-yml"><code class="language-yml"># Deployment## Docs: https://hexo.io/docs/deployment.htmldeploy:  type: git  repo: git@github.com:colbertwong/colbertwong.github.io.git  brabch: master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>生成页面，并发布至Github Pages，执行如下命令：</li></ul><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Hexo会根据配置文件渲染出一套静态页面</span>hexo g<span class="token comment" spellcheck="true"># 将上一步渲染出的一系列文件上传至至Github Pages</span>hexo d<span class="token comment" spellcheck="true"># 也可以直接输入此命令，直接完成渲染和上传</span>hexo g -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上传完成后，在浏览器中打开https://&lt;用户名&gt;.github.io，查看上传的网页。</p><h4 id="hexo博客主题安装"><a href="#hexo博客主题安装" class="headerlink" title="hexo博客主题安装"></a>hexo博客主题安装</h4><p>应用 <a href="https://blinkfox.github.io/2018/09/28/qian-duan/hexo-bo-ke-zhu-ti-zhi-hexo-theme-matery-de-jie-shao/" target="_blank" rel="noopener">matery</a> 主题</p><ul><li>切换主题 ok</li><li>新建分类 categories 页 ok</li><li>新建标签 tags 页 ok</li><li>新建关于我 about 页 ok</li><li>新建友情连接 friends 页（可选的）启用</li><li>代码高亮 ok</li><li>搜索 ok</li><li>中文链接转拼音（可选的） 未启用</li><li>文章字数统计插件（可选的） 未启用</li><li>添加 RSS 订阅支持（可选的） 未启用</li><li>修改页脚 ok</li><li>修改社交链接 ok</li><li>修改打赏的二维码图片 未启用</li><li>配置音乐播放器（可选的） 未启用</li><li>更换favicon 和 Logo ok</li><li>开启 GitTalk 评论模块（留言板也依赖该模块） ok</li><li>在github上创建Gitalk用仓库后，一定要初始化issues,就是写一条issues。</li></ul><h4 id="其他一些DIY"><a href="#其他一些DIY" class="headerlink" title="其他一些DIY"></a>其他一些DIY</h4><ul><li>修改原有相册<a href="https://liyangzone.com/2019/07/22/hexo博客添加一级分类相册/" target="_blank" rel="noopener">传送门</a> 未修改</li><li>添加天气小插件 未添加<pre><code>首先去中国天气官网：https://cj.weather.com.cn/plugin/pc，配置自己的插件，选择自定义插件—&gt;自定义样式——&gt;生成代码，然后会生成一段代码，复制粘贴到 themes/matery/layout/layout.ejs即可。</code></pre></li><li>自定义404页面 未修改<br>首先再站点根目录下的source文件夹下新建404.md文件，里面内容如下：<pre><code></code></pre></li></ul><hr><p>title: 404<br>date: 2019-10-28 16:41:10<br>type: “404”<br>layout: “404”<br>description: “Oops～，我崩溃了！找不到你想要的页面了”</p><hr><pre><code>紧接着再新建主题文件夹的layout目录下新建404.ejs文件，添加内容如下：``` js&lt;style type=&quot;text/css&quot;&gt;    /* don&#39;t remove. */    .about-cover {        height: 90.2vh;    }&lt;/style&gt;&lt;div class=&quot;bg-cover pd-header about-cover&quot;&gt;    &lt;div class=&quot;container&quot;&gt;        &lt;div class=&quot;row&quot;&gt;            &lt;div class=&quot;col s10 offset-s1 m8 offset-m2 l8 offset-l2&quot;&gt;                &lt;div class=&quot;brand&quot;&gt;                    &lt;div class=&quot;title center-align&quot;&gt;                        404                    &lt;/div&gt;                    &lt;div class=&quot;description center-align&quot;&gt;                        &lt;%= page.description %&gt;                    &lt;/div&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;    &lt;/div&gt;&lt;/div&gt;&lt;script&gt;    // 每天切换 banner 图.  Switch banner image every day.    $(&#39;.bg-cover&#39;).css(&#39;background-image&#39;, &#39;url(https://cdn.jsdelivr.net/gh/Yafine/cdn@2.6/source/medias/banner/&#39; + new Date().getDay() + &#39;.jpg)&#39;);&lt;/script&gt;</code></pre><ul><li>添加Gitalk评论模块</li></ul><h4 id="博客优化"><a href="#博客优化" class="headerlink" title="博客优化"></a>博客优化</h4><ul><li><p>图片懒加载 ok<br>使用图片懒加载需要安装插件：hexo-lazyload-image<br>在站点根目录执行下面的命令：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-lazyload-image --save<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后在站点配置文件(/_config.yml)下添加下面的代码：</p><pre class="line-numbers language-yml"><code class="language-yml">lazyload:enable: true  # 是否开启图片懒加载onlypost: false  # 是否只对文章的图片做懒加载loadingImg: # eg ./images/loading.gif<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>代码压缩 未启用</p></li><li><p>CDN加速 未启用</p></li><li><p>图床 开启<br>本图床是基于Github的，采用jsdelivr cdn进行加速，上传工具采用的是PicGo。</p><ol><li>新建一个GitHub仓库 <code>colbertwong-imgs</code></li><li>生成token <code>setting -&gt; Developer settings -&gt; Persongal Access tokens -&gt; Generate new token -&gt; Note:picgo -&gt; repo选中 -&gt; Generate token</code></li><li>复制token值粘贴到文本文档中，先保存下来，后面配置PicGo要用到。</li><li>下载安装PicGO<a href="https://github.com/Molunerfinn/PicGo/releases" target="_blank" rel="noopener">下载地址：</a></li><li>运行PicGO，开始设置。<ol><li>设定仓库名： <code>colbertwong-imgs</code></li><li>设定分支名： <code>master</code></li><li>设定Token： 之前生成的token</li><li>指定存储路径：自定义，例：<code>images/</code></li><li>设定自定义域名：格式：<code>https://cdn.jsdelivr.net/gh/colbertwong/colbertwong-imgs</code>，colbertwong是我的GitHub用户名，colbertwong-imgs为新建的仓库，用于存储图片</li></ol></li></ol></li></ul><h4 id="SEO优化"><a href="#SEO优化" class="headerlink" title="SEO优化"></a>SEO优化</h4><p>未优化，可参照<a href="https://blog.sky03.cn/posts/42790.html#toc-heading-18" target="_blank" rel="noopener">博文</a></p><p>以上</p>]]></content>
      
      
      <categories>
          
          <category> 备忘 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github </tag>
            
            <tag> hexo </tag>
            
            <tag> blog </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php5升级到7时函数参数问题</title>
      <link href="/2020/02/06-2151.html"/>
      <url>/2020/02/06-2151.html</url>
      
        <content type="html"><![CDATA[<h2 id="从php5-2升级到php7-1时函数的参数问题"><a href="#从php5-2升级到php7-1时函数的参数问题" class="headerlink" title="从php5.2升级到php7.1时函数的参数问题"></a>从php5.2升级到php7.1时函数的参数问题</h2><p>最近在做一个系统的ID管理系统php升级，从php5.2升级到php7.1,经常会遇到一些问题。今天遇到一个小问题，拿出来分享一下。废话少说，上示例代码。</p><ul><li>SC.php</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">SC</span> <span class="token punctuation">{</span>        <span class="token keyword">static</span> <span class="token keyword">function</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'input str:'</span> <span class="token punctuation">.</span> <span class="token variable">$str</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 有参数调用</span>    <span class="token constant">SC</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">out</span><span class="token punctuation">(</span><span class="token string">'one param'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 无参数调用</span>    <span class="token constant">SC</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">out</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>php5.2中的实行结果：</li></ul><pre><code>input str:one paramWarning: Missing argument 1 for SC::out(), called in C:\Users\colbe\Documents\SC.php on line 11 and defined in C:\Users\colbe\Documents\SC.php on line 4input str:</code></pre><ul><li>php7.1中的实行结果：</li></ul><pre><code>input str:one paramFatal error: Uncaught ArgumentCountError: Too few arguments to function SC::out(), 0 passed in C:\Users\colbe\Documents\SC.php on line 11 and exactly 1 expected in C:\Users\colbe\Documents\SC.php on line 4ArgumentCountError: Too few arguments to function SC::out(), 0 passed in C:\Users\colbe\Documents\SC.php on line 11 and exactly 1 expected in C:\Users\colbe\Documents\SC.php on line 4Call Stack:0.0069 348536 1. {main}() C:\Users\colbe\Documents\SC.php:00.0088 348568 2. SC::out() C:\Users\colbe\Documents\SC.php:11</code></pre><p>Warning变Fatal，直接就崩了。修改倒是很简单，给函数的参数加个默认值就可以了。修改一下方法的签名部分为<code>[static function out($str = null) {]</code>就可以了。</p><ul><li>再次运行，结果如下：</li></ul><pre><code>input str:one paraminput str:</code></pre><p>PS:来自TimJuly【技术小组长 @ 阿里巴巴】的重要提示：</p><pre><code>说白了就是代码不规范。Warning 是错误的一种类型，并不是说你这个没有错，可以这样用。就算是 Notice的错误也应该处理完再上线。</code></pre><p>以上</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> 升级 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>url被截断问题</title>
      <link href="/2020/02/06-2144.html"/>
      <url>/2020/02/06-2144.html</url>
      
        <content type="html"><![CDATA[<h2 id="在URL中使用另一个url作为参数时会被-amp-截断的问题"><a href="#在URL中使用另一个url作为参数时会被-amp-截断的问题" class="headerlink" title="在URL中使用另一个url作为参数时会被&amp;截断的问题"></a>在URL中使用另一个url作为参数时会被<code>&amp;</code>截断的问题</h2><p>下午帮同事写一个url转二维码的小工具时，发生标题中描述的问题。比如：输入的url是<code>http://www.example.dev/name=user&amp;code=2000</code>,转换为二维码后，扫描得到的url却是<code>http://www.example.dev/name=user</code>,<code>&amp;</code>后的部分没有正确转换。问题很明显，作为参数的url中的<code>&amp;</code>后的被解析为其他参数了。</p><p>前台请求的完整url是<code>&quot;http://{domain}/tools/getQrCode.php?url=http://www.example.dev/name=user&amp;code=2000</code>，后台从<code>$_GET[&#39;url&#39;]</code>中取得却是<code>http://www.example.dev/name=user</code>，另一部分成了<code>$_GET[&#39;code&#39;]</code>了。</p><p>解决方法其实很简单，给作为参数的url做一下urlencode就好了。js中可以直接使用<code>encodeURIComponent</code>函数为url编码。</p><h4 id="代码示例如下："><a href="#代码示例如下：" class="headerlink" title="代码示例如下："></a>代码示例如下：</h4><ul><li>后台php</li></ul><pre class="line-numbers language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$url</span> <span class="token operator">=</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'url'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;div class="alert alert-danger" role="alert">请输入url！&lt;/div>'</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token function">genQrCode</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">genQrCode</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">require_once</span> <span class="token string">'libs/phpqrcode.php'</span><span class="token punctuation">;</span>    <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$url</span><span class="token punctuation">;</span>                  <span class="token comment" spellcheck="true">//二维码内容</span>    <span class="token variable">$errorCorrectionLevel</span> <span class="token operator">=</span> <span class="token string">'L'</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//容错级别</span>    <span class="token variable">$matrixPointSize</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>           <span class="token comment" spellcheck="true">//生成图片大小</span>    <span class="token comment" spellcheck="true">//生成二维码图片</span>    <span class="token variable">$filename</span> <span class="token operator">=</span>  <span class="token string">'/../tmp/'</span><span class="token punctuation">.</span><span class="token function">microtime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'.png'</span><span class="token punctuation">;</span>    QRcode<span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">png</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token function">dirname</span><span class="token punctuation">(</span> <span class="token constant">__FILE__</span> <span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$errorCorrectionLevel</span><span class="token punctuation">,</span> <span class="token variable">$matrixPointSize</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">'&lt;img src="tmp'</span><span class="token punctuation">.</span> <span class="token variable">$filename</span> <span class="token punctuation">.</span> <span class="token string">'">&lt;br>&lt;p>'</span> <span class="token punctuation">.</span> <span class="token variable">$url</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/p>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>前台html和js</li></ul><pre class="line-numbers language-html"><code class="language-html">之前的部分略        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>col-md-6 col-lg-6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel panel-warning<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-heading<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>二维码转换<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-body<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-group<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>                            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>form-control<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span> <span class="token attr-name">placeholder</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>url<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>getQr<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-primary<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>生成二维码<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>reset<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>btn btn-success<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>清除url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>                    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>qrdiv<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>panel-body<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">word-break</span><span class="token punctuation">:</span> break-all<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript">    <span class="token function">$</span><span class="token punctuation">(</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#getQr"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            $qrstr<span class="token operator">=</span><span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#url"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">val</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            $url <span class="token operator">=</span> <span class="token string">"tools/getQrCode.php?url="</span> <span class="token operator">+</span> <span class="token function">encodeURIComponent</span><span class="token punctuation">(</span>$qrstr<span class="token punctuation">)</span><span class="token punctuation">;</span>            $<span class="token punctuation">.</span><span class="token keyword">get</span><span class="token punctuation">(</span>$url<span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>result<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#qrdiv"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">html</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>PS：样式部分使用的bootstrap3<br>以上</p>]]></content>
      
      
      <categories>
          
          <category> 技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> php </tag>
            
            <tag> url </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>请说普通话</title>
      <link href="/2020/02/06-2123.html"/>
      <url>/2020/02/06-2123.html</url>
      
        <content type="html"><![CDATA[<h2 id="请说普通话"><a href="#请说普通话" class="headerlink" title="请说普通话"></a>请说普通话</h2><p>老婆和老爹在厨房发生的一段对话。<br>老婆：爸，能把土豆挠子递给我吗？<br>老爹：那是个啥？你能说普通话吗？<br>老婆：就是削土豆皮用的小工具啊。普通话管这个叫啥？<br>老爹：垮皮刀呗！</p>]]></content>
      
      
      <categories>
          
          <category> 趣事 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 家庭 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2020/02/06-1048.html"/>
      <url>/2020/02/06-1048.html</url>
      
        <content type="html"><![CDATA[<h2 id="第一篇博客"><a href="#第一篇博客" class="headerlink" title="第一篇博客"></a>第一篇博客</h2><h3 id="焦虑如影随形"><a href="#焦虑如影随形" class="headerlink" title="焦虑如影随形"></a>焦虑如影随形</h3><p>不知不觉，已经是不惑之年。对于一个技术很low的程序员来说，可以说是到了职业生涯的末期。如果不能成功转型，将意味着你随时会失去现在的工作。这对于一个拖家带口中年男人来说，是灾难。于是，焦虑如影随形。</p><h3 id="咸鱼快乐源泉"><a href="#咸鱼快乐源泉" class="headerlink" title="咸鱼快乐源泉"></a>咸鱼快乐源泉</h3><p>如何缓解焦虑？努力学习各种新技术–越学越多；努力钻研业务–换项目了；努力学习外语–真学不动。费了半天劲，啥也没学成，更焦虑了。还是咸鱼最快乐。可惜只是快乐一时而已，抬头看看，一片茫然，低头瞧瞧，脚下那片影子的名字叫焦虑。</p><h3 id="不会总结自己"><a href="#不会总结自己" class="headerlink" title="不会总结自己"></a>不会总结自己</h3><p>从小到大都不会做总结，所有阅读理解题做不好，工作总结写不好，年终报告做不好。然后就各种逃避，不愿意动笔，甚至连记录都不愿意做了。这样不对！所以，尝试着总结一下这些年的自己：与人为善，家庭和睦。嗯，果然为社会稳定尽了义务，仅此而已。就这些吗？回忆了一下，也许还有吧，但是，没有记录，没有总结。作为人的社会属性有了，中规中矩。自己呢？突然，觉得整个人都不好了。</p><h3 id="写写更健康"><a href="#写写更健康" class="headerlink" title="写写更健康"></a>写写更健康</h3><p>写写吧，记录自己。希望下个十年，回头再看，不会惊出一身冷汗。</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 心情 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
